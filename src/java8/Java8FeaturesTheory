Functional Interfaces : Any interface that has only one abstract method is called Functional Interface. To invoke Lambda expression we use FI
ex: Runnable, Callable, Comparable, Comparator. @FunctionalInterface annotation is used to mark any interface as Fi
If a parent interface is FI then child interface is also FI(if it doesn't have any extra abstract method) Mostly used in place of anonymous classes.

A functional interface may contain more than one method but it must be default one

Lambda Expression: an anonymous function (a function in isolation). During compilation it is converted to a private method but no seperate .class file is generated
the expression through which we can represent anonymous function
uses: enables functional programmimg in java
readable & concise code
support parallel processing
helps to use API efficiently

   new Thread( () -> System.out.println( "Sampe Thread" ) ).start(); // using Thread
() = empty argumentlist
->array token
Sys.out.print - body
Anonymous Inner Class vs Lambda
-----------------------------------------------------------------------------------------------------------
Anonymous Inner Class can extend an abstract class, normal class & implement interface. so it is best
lambda expression can implement an interface which contains a single abstract method

Default & Static Methods in Interface:
-------------------------------------------------
Default or Virtual Extension or Defendor: Helps to add a new method without affecting the implementation classes.
We can directly call or override default method. When you override it it must be declared as public
Object class methods cant be implement as default methods as they are by default available to all classes
Multiple inheritance is possible w.r to Default methods
Static Methods: Generally static is associated with class rather then object. Class is a costly operation. So interface added static method making it more meaningful

Predefined Functional Interfaces:
----------------------------------------------------------------------
Predicate - Conditional Checks - has test method joining is possible using and or negate methods return boolean
Function -- performs operations & return result -- has apply method chaining is possible by using andThen & compose methods can return anything
f1.andThen(f2).apply(pre)- fi followed by f2
f1.compose(f2).apply(pre)-f2 followed by f1
Consumer -- take input perform some operation but dont return any thing . mostly store in db. accept method
Supplier
------------------------------------------------------------------------
Two Predefined Functional Interfaces

Bi-Predicate
Bi-Function
Bi-Consumer

----------------------------------------------------------------------
Primitive
-----------------------------------------------------
Int Predicate
Double Predicate

Streams (java.util.stream) an interface
-----------------------------------------------------------------------------------------------------
A stream is a sequence of elements from a source(collections/arrays) that supports aggregate operations on them. or A stream is a sequence of objects that supports various methods which can be pipelined to produce the desired result.
Each intermediate operation is lazily executed and returns a stream as a result, hence various intermediate operations can be pipelined. Terminal operations mark the end of the stream and return the result.
https://howtodoinjava.com/java/stream/java-streams-by-examples/
https://www.informit.com/articles/article.aspx?p=2303960&seqNum=7