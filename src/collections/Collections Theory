
Collections vs Arrays
-----------------------------------------------------------------------------------------------------
Arrays are:
fixed in size
homogenous
not a good choice for memory
good performance
no underlying data structure(if we want to add any element need to do wit code)
can hold primitives & objects
Collections:
growable in size
homogenous & hetrogenous
support underlying dats structure
good choice for memory
not that good for performance
can hold only objects
-----------------------------------------------------------------------------------------------------
Collection : group of individual objects

Collection vs Collections
------------------------------------------------------------------------------------------------
Collection: is an core interface
Collections : is an utility class that defines methods like sort.. it contains all static methods min,max..
---------------------------------------------------------------------------------------------------------------
List vs Set
-------------------------------------------------------------------------------------------------
List : allows duplicate , preserves insertion order
Set: no duplicates, doesnt preserve insertion order
----------------------------------------------------------------------------------------------
There is no method to get an element directly from collection interface
Except Treeset & TreeMap heterogenous elements are allowed

Each collection class implements serializable,clonable interface

ArrayList vs Vector
----------------------------------------------------
ArrayList is non-synchronized & fast  whereas Vector is synchronized &slow. Vector is a legacy(1.0) class but AL is not(1,2v)
---------------------------------------------------------------------------------------------------------------
Public Static synchronizedList(ArrayList AL)-gives synchronized Array List

ArrayList vs LikedList
----------------------------------------------------------------------------------------------------
ArrayList is based on Resizable array and is best for retrival operations & is fast bcz it implements RandomAccess where as
Linked List is based on Double LinkedList & is best for insertion deletion operations &doesnt implement RandomAccess
-----------------------------------------------------------------------------------------------------------------
3 cursors of Java
1. Enumeration : Applicable for only Legacy classes like Vector.Uni -Directional
Enumeration e = v.elements(); // creates enumeration objects
        while (e.hasMoreElements()) { //
            System.out.println( e.nextElement() );
        }
Only retrival is possible not removal

2.Iterator : Universal Cursor & Uni- Directional
  Iterator itr = list.iterator();
        while (itr.hasNext()) {
            String name = (String) itr.next();
            if (name == "Ajay") {
                itr.remove();
            }
removal is possible not replacement & only farward

3.ListIterator:Bidirectinal, Read Remove Replace
ListIterator lisIterator= li.listIterator()

applicable to List

HashSet vs Linked HashSet
--------------------------------------------------------
HsshSet is based on HashTable & doesnt preserve insertion order & is best for searching operations
LinkedHashSet is based on HashTable & LinkedList preserve insertion order best for cache based applications

Comparable vs Comparator
------------------------------------------------------------------------------------------
Comparable deals with default sorting order present in java.lang package with one method implemented by Wrapper & String classes
here original class is modified

Comparator deals with customised sorting present in java.uti with two methods implemented by Collator &Rule Based Collator no original class is modified

HashMap vs HashTable
-------------------------------------------------------------------------------------------------------------
HashMap is non-synchronized allows one null key & null value & is fast where as HashTable is synchronized no nulls are allowed & slow


ConcurrentHashMap	                                                                                                   SynchronizedMap	                         HashTable
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
We will get thread safety without locking the total map object just with a bucket level lock.	We will get thread safety by locking the whole map object.	We will get thread safety by locking the whole map object
At a time multiple threads are allowed to operate on map objects safely.	At a time only one thread is allowed to perform any operation on a map object.	At a time one thread is allowed to operate on a map object.
Read operation can be performed without lock but write operation can be performed with bucket level lock.	Every read and write operations required total map object 	Every read and write operations required total map object 
While one thread iterating map objects the other thread is allowed to modify the map and won’t get ConcurrentModificationException.	While one thread iterating map object the other threads are not allowed to modify the map otherwise we will get ConcurrentModificationException	While one thread iterating map object the other threads are not allowed to modify the map otherwise we will get ConcurrentModificationException
Iterator of ConcurrentHashMap is fail-safe and won’t raise ConcurrentModificationException	Iterator of SynchronizedMap is fail-fast and it will raise ConcurrentModificationException	Iterator of HashTable is fail-fast and it will raise ConcurrentModificationException
Null is not allowed for both keys and values.	Null is allowed for both keys and values	Null is not allowed for both keys and values.
Introduce in java 1.5version	Introduce in java 1.2 version	Introduce in java 1.0version